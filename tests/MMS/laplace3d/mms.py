from __future__ import print_function
from builtins import str
from sympy import symbols, cos, sin, tan, exp, log, pi
from boutdata.mms_alternate import *
from sys import exit

all_terms = True

global metric

# Define non-trivial metrics
geometry = SimpleTokamak()
#geometry = SimpleTokamak(q=lambda x:1.5+.00*x**2)
#geometry = ShapedTokamak()

# Define manufactured solution in toroidal x, y=theta, z=phi
# (where x is a radial coordinate going from zero to one across our domain)
solution = sin(x*pi)*exp(sin(3*z)) + tan(sin(2*x*pi))*log(2. + sin(z + 1.7))
#solution = sin(x*pi)
#solution = tan(sin(2*x*pi))*(1.+.1*sin(z))
#solution = sin(x*pi)*cos(z)
#solution = exp(cos(z))

# Shift solution to field-aligned coordinates
solution = solution.subs(z, z+geometry.zShift)

# set y to constant value
if False:
    stretchfactor = 0.1
    yval = (y-pi)*stretchfactor+pi
    metric.g11 = metric.g11.subs(y, yval)
    metric.g22 = metric.g22.subs(y, yval)
    metric.g33 = metric.g33.subs(y, yval)
    metric.g12 = metric.g12.subs(y, yval)
    metric.g13 = metric.g13.subs(y, yval)
    metric.g23 = metric.g23.subs(y, yval)
    metric.g_11 = metric.g_11.subs(y, yval)
    metric.g_22 = metric.g_22.subs(y, yval)
    metric.g_33 = metric.g_33.subs(y, yval)
    metric.g_12 = metric.g_12.subs(y, yval)
    metric.g_13 = metric.g_13.subs(y, yval)
    metric.g_23 = metric.g_23.subs(y, yval)
    metric.J = metric.J.subs(y, yval)
    metric.B = metric.B.subs(y, yval)
    solution = solution.subs(y, yval)

G3 = (DDX(metric.J*metric.g13) + DDY(metric.J*metric.g23) + DDZ(metric.J*metric.g33)) / metric.J
print("term1",DDX(metric.J*metric.g13))
print("term2",DDY(metric.J*metric.g23))
print("term3",DDZ(metric.J*metric.g33))
# Calculate input

input = Delp2(solution, all_terms)

# Print input file to stdout

print("# Generated by mms.py")
print("")
print("MZ = 32")
print("myg = 1")
print("mxg = 1")
print("")
print("solution = "+exprToStr(solution))
print("input = "+exprToStr(input))
print("G3 = "+exprToStr(G3))
print("g23 = "+exprToStr(metric.g23))
print("")
print("[mesh]")
print("")
print("symmetricGlobalX = true")
print("")
print("nx = 34")
#print("ny = 1")
print("ny = (nx-2*mxg)")
#print("ny = (nx-2*mxg)/8")
#print("ny = 8")
print("nz = nx-2*mxg")
print("")
print("Lx = 1.0")
print("")
print("dx = Lx/(nx-2*mxg)")
print("dy = 2*pi*Lx/ny")
print("dz = 2*pi*Lx/mz")
print("")
geometry.print_mesh()
print("")
print("[laplace]")
print("")
print("type = cyclic")
print("flags = 0")
print("all_terms = "+str(all_terms))

exit(0)
